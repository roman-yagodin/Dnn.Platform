<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add.Title" xml:space="preserve">
    <value>Создать новый модуль</value>
  </data>
  <data name="Edit.Title" xml:space="preserve">
    <value>Редактировать модуль</value>
  </data>
  <data name="cmdCreate.Text" xml:space="preserve">
    <value>Создать модуль</value>
  </data>
  <data name="Control.Text" xml:space="preserve">
    <value>Элемент управления</value>
  </data>
  <data name="Manifest.Text" xml:space="preserve">
    <value>Манифест</value>
  </data>
  <data name="New.Text" xml:space="preserve">
    <value>Новый</value>
  </data>
  <data name="plAddPage.Help" xml:space="preserve">
    <value>Отметьте, чтобы создать тестовую страницу для нового модуля.</value>
  </data>
  <data name="plAddPage.Text" xml:space="preserve">
    <value>Создать проверочную страницу?</value>
  </data>
  <data name="plCreate.Help" xml:space="preserve">
    <value>Вы можете создать новый модуль тремя различными способами. Выберите один из них. "Новый" - создает новый элемент управления модулем, "Элемент управления" - создает модуль из существующего элемента управления. "Манифест" - создает модуль из существующего манифеста модуля.</value>
  </data>
  <data name="plCreate.Text" xml:space="preserve">
    <value>Создать модуль из:</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>Здесь можно задать описание создаваемого модуля.</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Описание:</value>
  </data>
  <data name="plFile1.Help" xml:space="preserve">
    <value>Выберите ресурс для создания модуля.</value>
  </data>
  <data name="plFile1.Text" xml:space="preserve">
    <value>Ресурс:</value>
  </data>
  <data name="plModule1.Help" xml:space="preserve">
    <value>Это папка, где находятся файлы и папки Вашего модуля.</value>
  </data>
  <data name="plModule1.Text" xml:space="preserve">
    <value>Папка модуля:</value>
  </data>
  <data name="plName.Help" xml:space="preserve">
    <value>Введите дружественное имя для создаваемого модуля.</value>
  </data>
  <data name="plName.Text" xml:space="preserve">
    <value>Имя модуля:</value>
  </data>
  <data name="plOwner1.Help" xml:space="preserve">
    <value>Разрабочики модуля должны использовать "уникальную" папку внутри DesktopModules для любых разработок, чтобы избежать возможных недоразумений с другими разработчиками. Выберите папку, которую Вы хотели бы использовать для разработки модуля. Примечание: папки с пользовательскими элементами управления (файлы .ascx) и корневая папка администратора исключены из этого списка.</value>
  </data>
  <data name="plOwner1.Text" xml:space="preserve">
    <value>Базовая папка:</value>
  </data>
  <data name="Template.Text" xml:space="preserve">
    <value>Шаблон</value>
  </data>
  <data name="cmdAdd.Text" xml:space="preserve">
    <value>Добавить папку</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Отмена</value>
  </data>
  <data name="cmdSave.Text" xml:space="preserve">
    <value>Создать папку</value>
  </data>
  
  <data name="LanguageError.Text" xml:space="preserve">
    <value>Необходимо выбрать язык для элемента управления модуля.</value>
  </data>
  <data name="ModuleControlTemplate.Text" xml:space="preserve">
    <value>&lt;%@ Control Language="{0}" ClassName="{1}" Inherits="DotNetNuke.Entities.Modules.PortalModuleBase" %&gt;
&lt;h1&gt;Поздравляем!&lt;/h1&gt;
&lt;p&gt;Вы успешно создали новый модуль. Вы можете изменить исходный файл элемента управления модуля, выбрав пункт Исходный Код в меню действий.&lt;/p&gt;
&lt;script runat="server"&gt;

&lt;/script&gt;</value>
  </data>
  <data name="plFile2.Help" xml:space="preserve">
    <value>Введите имя для нового элемента управления модуля</value>
  </data>
  <data name="plFile2.Text" xml:space="preserve">
    <value>Имя файла:</value>
  </data>
  
  <data name="FileExists.Text" xml:space="preserve">
    <value>Выбранное Вами имя файла уже существует. Пожалуйста, используйте другое имя.</value>
  </data>
  <data name="ModuleFolder.Text" xml:space="preserve">
    <value>Необходимо выбрать папку модуля. В случае необходимости, можно создать новую папку.</value>
  </data>
  <data name="TabExists.Text" xml:space="preserve">
    <value>Уже существует страница с именем, совпадающим с именем создаваемого модуля. Модуль был успешно создан, но проверочная страница не была добавлена.</value>
  </data>
  <data name="plModule2.Help" xml:space="preserve">
    <value>Введите имя новой папки модуля.</value>
  </data>
  <data name="plModule2.Text" xml:space="preserve">
    <value>Имя папки:</value>
  </data>
  <data name="plOwner2.Help" xml:space="preserve">
    <value>Введите имя для новой базовой папки.</value>
  </data>
  <data name="plOwner2.Text" xml:space="preserve">
    <value>Имя папки:</value>
  </data>
  <data name="plLang.Help" xml:space="preserve">
    <value>Выберите используемый язык.</value>
  </data>
  <data name="plLang.Text" xml:space="preserve">
    <value>Язык:</value>
  </data>
  <data name="ImportControl.ErrorMessage" xml:space="preserve">
    <value>Возникла непредвиденная ошибка при импорте элемента управления модуля. Пожалуйста, перейдите на страницу просмотра событий сайта для получения подробной информации</value>
  </data>
  <data name="InvalidFilename.Text" xml:space="preserve">
    <value>Имя файла не может содержать недопустимые символы</value>
  </data>
  <data name="MissingControl.Text" xml:space="preserve">
    <value>Необходимо выбрать имя файла для управления модулем</value>
  </data>
  <data name="MissingFriendlyname.Text" xml:space="preserve">
    <value>Необходимо указать имя модуля</value>
  </data>
  <data name="NonuniqueName.Text" xml:space="preserve">
    <value>Пакет с таким именем уже существует - пожалуйста, укажите другое имя</value>
  </data>
  <data name="NonuniqueNameModule.Text" xml:space="preserve">
    <value>Модуль {0} уже зарегистрирован в системе</value>
  </data>
  <data name="MissingManifest.Text" xml:space="preserve">
    <value>Необходимо предоставить файл манифеста (.dnn или .dnn5)</value>
  </data>
  <data name="NoControl.Text" xml:space="preserve">
    <value>Необходимо выбрать элемент управления в списке "Ресурсы"</value>
  </data>
</root>
