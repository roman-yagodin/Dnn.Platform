<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers && schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;О мастере создания пакета&lt;/h1&gt;&lt;p&gt; Этот мастер позводяет создавать пакеты расширений.&lt;/p&gt;</value>
  </data>
  <data name="ControlTitle_packagewriter.Text" xml:space="preserve">
    <value>Создать пакет</value>
  </data>
  <data name="Introduction.Help" xml:space="preserve">
    <value>С помощью этого мастера Вы можете  упаковать все нужные вам файлы для установки на другом экземпляре DNN.</value>
  </data>
  <data name="Introduction.Title" xml:space="preserve">
    <value>Создать пакет</value>
  </data>
  <data name="plBasePath.Help" xml:space="preserve">
    <value>Каталог, где могут быть найдены файлы пакета.</value>
  </data>
  <data name="plBasePath.Text" xml:space="preserve">
    <value>Каталог</value>
  </data>
  <data name="plBinFolder.Help" xml:space="preserve">
    <value>Каталог, где могут быть найдены сборки пакета.</value>
  </data>
  <data name="plBinFolder.Text" xml:space="preserve">
    <value>Каталог сборок</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Возврат</value>
  </data>
  <data name="ChooseFiles.Help" xml:space="preserve">
    <value>На этом этапе вы можете добавить файлы для  включения в ваш пакет.  Мастер попытался определить необходимые файлы для включения, но вы можете добавить или удалить файлы из списка. Кроме того вы должны решить, включить ли исходные файлы, отметив "Включая исходники".</value>
  </data>
  <data name="ChooseFiles.Title" xml:space="preserve">
    <value>Выбрать файлы для включения</value>
  </data>
  <data name="cmdGetFiles.Text" xml:space="preserve">
    <value>Обновить список файлов</value>
  </data>
  <data name="chkIncludeSource.Text" xml:space="preserve">
    <value>Включая исходники:</value>
  </data>
  <data name="ChooseAssemblies.Help" xml:space="preserve">
    <value>На этом этапе вы можете добавить сборки для  включения в ваш пакет. Если есть файл проекта в папке Package, мастер попытается определить нужные сборки для включения, но вы можете добавить или удалить нужные сборки из списка.</value>
  </data>
  <data name="ChooseAssemblies.Title" xml:space="preserve">
    <value>Выбрать сборки для включения</value>
  </data>
  <data name="cmdGetAssemblies.Text" xml:space="preserve">
    <value>Обновить список</value>
  </data>
  <data name="Complete.Text" xml:space="preserve">
    <value>Полный пакет (zip):</value>
  </data>
  <data name="FinalStep.Help" xml:space="preserve">
    <value>Последний шаг - создание пакета. Для создания копии манифеста, отметьте флаг Создать файл манифеста - файл будет создан в папке пакета. Вне зависимости от Вашего выбора здесь, манифест будет сохранен в базе данных и добавлен в пакет.&lt;br/&gt;&lt;br/&gt; 
Для создания пакета, отметьте флаг Создать пакет. Пакет булет создан в соответствующей папке внутри Install (например Install/Modules для модулей, Install/Themes для тем и т.п.).</value>
  </data>
  <data name="FinalStep.Title" xml:space="preserve">
    <value>Создать пакет</value>
  </data>
  <data name="Manifest.Text" xml:space="preserve">
    <value>Только манифест (DNN):</value>
  </data>
  <data name="plManifestName.Help" xml:space="preserve">
    <value>Введите полное имя файла для манифеста.</value>
  </data>
  <data name="plManifestName.Text" xml:space="preserve">
    <value>Имя файла для манифеста:</value>
  </data>
  <data name="LogTitle.Text" xml:space="preserve">
    <value>Журнал создания пакета</value>
  </data>
  <data name="plArchiveName.Help" xml:space="preserve">
    <value>Введите имя файла для создания архива (zip).</value>
  </data>
  <data name="plArchiveName.Text" xml:space="preserve">
    <value>Имя файла архива:</value>
  </data>
  <data name="WriterResults.Help" xml:space="preserve">
    <value>Результаты создания пакета показаны ниже.</value>
  </data>
  <data name="WriterResults.Title" xml:space="preserve">
    <value>Результаты создания пакета</value>
  </data>
  <data name="CreateManifest.Help" xml:space="preserve">
    <value>На основе вашего выбора мастер создал манифест для пакета. Манифест отображен в текстовом поле ниже. Вы можете отредактировать манифест, прежде чем создать пакет.</value>
  </data>
  <data name="CreateManifest.Title" xml:space="preserve">
    <value>Создать манифест</value>
  </data>
  <data name="plManifest.Help" xml:space="preserve">
    <value>Включите, чтобы создать файл манифеста.</value>
  </data>
  <data name="plManifest.Text" xml:space="preserve">
    <value>Создать файл манифеста:</value>
  </data>
  <data name="plPackage.Help" xml:space="preserve">
    <value>Включите, для создания архива (zip) с пакетом.</value>
  </data>
  <data name="plPackage.Text" xml:space="preserve">
    <value>Создать пакет:</value>
  </data>
  <data name="plReviewManifest.Help" xml:space="preserve">
    <value>Включите, чтобы сделать изменения в манифесте прежде, чем Вы создадите новый пакет.</value>
  </data>
  <data name="plReviewManifest.Text" xml:space="preserve">
    <value>Просмотр манифеста:</value>
  </data>
  <data name="plUseManifest.Help" xml:space="preserve">
    <value>Включите, чтобы использовать существующий манифест для пакета.</value>
  </data>
  <data name="plUseManifest.Text" xml:space="preserve">
    <value>Использовать существующий манифест:</value>
  </data>
  <data name="plChooseManifest.Help" xml:space="preserve">
    <value>Если вы выбрали использовать ранее созданный манифест, то вы можете выбрать какой манифест использовать.</value>
  </data>
  <data name="plChooseManifest.Text" xml:space="preserve">
    <value>Выберите файл манифеста:</value>
  </data>
  <data name="NoFileName.Text" xml:space="preserve">
    <value>Вы должны ввести имя файла для пакета.</value>
  </data>
  <data name="ManifestHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;Данным мастер создаст манифест для вашего расширения. При этом у вас есть несколько возможностей. Если вы уже создали манифест (при помощи мастера или вручную), вы можете использовать этот файл манифеста, отметив флаг "Использовать существующий манифест" и выбрав манифест из выпадающего списка манифестов, обнаруженных системой для данного расширения.&lt;/p&gt;
&lt;p&gt;Дополнительно, у вас есть возможность пересмотреть манифест на последнем шаге работы мастера - в том случае, если Вы хотите внести в него небольшие изменения, прежде чем пакет будет создан.&lt;/p&gt;</value>
  </data>
  <data name="InvalidPackageName.Text" xml:space="preserve">
    <value>Недопустимое имя пакета - у имени пакета должно быть расширение ".zip".</value>
  </data>
  <data name="InvalidManifestExtension.Text" xml:space="preserve">
    <value>Недопустимое расширение манифеста - расширение должно быть ".dnn".</value>
  </data>
  <data name="Success.Text" xml:space="preserve">
    <value>Пакет был создан и может быть найден в каталоге {0}.</value>
  </data>
</root>
